#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset
set -o errtrace
shopt -s inherit_errexit

# The package builder variables, for convenience, are all set in prepare_packages()

# Constants

c_temp_dir=$(dirname "$(mktemp)")/ruby_packages
c_data_directory=/tmp/ruby_ppa_packaging
c_data_files_prefix=packaged_
c_ruby_downloads_link="https://www.ruby-lang.org/en/downloads"
c_ruby_downloads_page_file="$c_temp_dir/downloads.html"
c_help="Usage: $(basename "$0") [-c|--cowbuild] [-u|--upload] [(-d|--distros) \$distros] [-l|--latest] <ppa_address> <debian_version> <email>

Downloads the latest stable Ruby versions, packages them, and uploads them.

WATCH OUT! Preview/release candidate versions are not built (see code for more details).

Requires \`prepare_ppa_package\` to be in the same directory as this file.

Example: $(basename "$0") --cowbuild --upload --distros bionic ppa:saverio/ruby-test-4 sav1 saverio.notexists@gmail.com
"

# Internal vars

v_stable_version_links=
v_build_directory=

# User-set vars

v_ppa_address=
v_debian_version=
v_author_email=

v_cowbuild_option=()
v_upload_option=(--no-upload)
v_distros=
v_only_latest_ruby=           # 1 for true; anything else for false

function decode_commandline_options {
  eval set -- "$(getopt --options hcud:l --long help,cowbuild,upload,distros:,latest -- "$@")"

  while true ; do
    case "$1" in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -c|--cowbuild)
        v_cowbuild_option=(--cowbuild)
        shift ;;
      -u|--upload)
        v_upload_option=()
        shift ;;
      -d|--distros)
        v_distros=$2
        shift 2 ;;
      -l|--latest)
        v_only_latest_ruby=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -ne 3 ]]; then
    echo "$c_help"

    exit 1
  fi

  v_ppa_address=$1
  v_debian_version=$2
  v_author_email=$3
}

function notify_build_dir {
  if [[ $v_build_directory != "" ]]; then
    echo "Last build directory: $v_build_directory"
  fi
}

function check_data_directory {
  if [[ ! -d $c_data_directory ]]; then
    >&2 echo "Data directory '$c_data_directory' not found!"
    exit 1
  fi
}

function prepare_temp_dir {
  echo "Preparing temp dir ($c_temp_dir)..."
  rm -rf "$c_temp_dir"
  mkdir "$c_temp_dir"
}

function download_ruby_downloads_webpage {
  echo "Downloading Ruby downloads webpage..."
  wget -q "$c_ruby_downloads_link" -O "$c_ruby_downloads_page_file"
}

# Preview/Release candidate versions are skipped. While they can be downloaded and built regularly,
# the version suffixes `-preview/-rc` cause the PPA to reject the release version, because according
# to Debian version naming, it's preceding.
# There are different approaches to this, for example adding a `-release` suffix to release versions,
# however, just discarding non-release versions is good enough, and by far the simplest.
# If a non-release package is accidentally uploaded to a PPA, it's possible to delete it, then upload
# the release version.
#
# Source (prettified; not exact):
#
#     <strong>Stable releases:</strong>
#     <ul>
#       <li>
#         <a href="https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.1.tar.gz">Ruby 2.7.1</a><br/>
#         sha256: d418483bdd0000576c1370571121a6eb24582116db0b7bb2005e90e250eae418
#         <li>
#           <a href="https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.6.tar.gz">Ruby 2.6.6</a><br/>
#           sha256: 364b143def360bac1b74eb56ed60b1a0dca6439b00157ae11ff77d5cd2e92291
#         </li>
#       </li>
#       <li>
#         <strong>Preview releases:</strong>
#         <ul>
#           <li>
#             <a href="https://cache.ruby-lang.org/pub/ruby/3.0/ruby-3.0.0-preview1.tar.gz">Ruby 3.0.0-preview1</a><br/>
#             sha256: ce8bd7534e7ec2a870b24d2145ea20e9bbe5b2d76b7dfa1102dbee5785253105
#           </li>
#         </ul>
#       </li>
#       <li>
#         <strong>In security maintenance phase (will EOL soon!):</strong>
#         <ul>
#           <li>
#             <a href="https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.8.tar.gz">Ruby 2.5.8</a><br/>
#             sha256: 6c0bdf07876c69811a9e7dc237c43d40b1cb6369f68e0e17953d7279b524ad9a
#           </li>
#         </ul>
#         <li>
#           <strong>Not maintained anymore (EOL):</strong>
#           <ul>
#             <li>
#
function find_and_set_stable_version_links {
  if [[ $v_only_latest_ruby == "1" ]]; then
    local versions_to_download=1
  else
    local versions_to_download=255
  fi

  mapfile -t v_stable_version_links < <(
    grep -zoP '(?s)<strong>Stable releases.*?<strong>Not maintained' "$c_ruby_downloads_page_file" |
    grep -aoP 'https://cache\.ruby-lang\.org.*?\.tar\.gz' |
    grep -avP 'ruby-\d+\.\d+\.\d+-(rc|preview)\d+\.' |
    head -n "$versions_to_download"
  )
  exit 1
}

function download_and_unpack_tarballs {
  for link in "${v_stable_version_links[@]}"; do
    echo "Downloading $link..."
    wget -qO- "$link" | tar xz -C "$c_temp_dir"
  done
}

function prepare_packages {
  export PPA_PAK_PPA_ADDRESS=$v_ppa_address
  export PPA_PAK_EMAIL=$v_author_email
  export PPA_PAK_DISTROS=$v_distros

  export PPA_PAK_DESCRIPTION='Interpreter of object-oriented scripting language Ruby'
  export PPA_PAK_HOMEPAGE='https://www.ruby-lang.org/'

  export PPA_PAK_BUILD_DEPS='autoconf,automake,bison,ca-certificates,curl,libc6-dev,libffi-dev,libgdbm-dev,libncurses5-dev,libsqlite3-dev,libtool,libyaml-dev,make,openssl,patch,pkg-config,sqlite3,zlib1g,zlib1g-dev,libreadline-dev,libssl-dev,libgmp-dev'
  export PPA_PAK_DEPS='libgmp-dev'
  export PPA_PAK_LONG_DESCRIPTION="\
Ruby is the interpreted scripting language for quick and easy
object-oriented programming.  It has many features to process text
files and to do system management tasks (as in perl).  It is simple,
straight-forward, and extensible.

This package provides up-to-date patch versions of the Ruby branch;
major/minor versions are not updated."
  export PPA_PAK_SECTION='interpreters'
  export PPA_PAK_VCS_BROWSER='https://github.com/ruby/ruby/'
  export PPA_PAK_VCS_GIT='https://github.com/ruby/ruby.git'

  for v_build_directory in "$c_temp_dir"/*/; do
    local major_minor_patch_version
    major_minor_patch_version=$(echo "$v_build_directory" | perl -ne '/ruby-(.*?)\/$/ && print $1')
    local major_minor_version=${major_minor_patch_version%.*}

    local build_tracking_file=${c_data_directory}/${c_data_files_prefix}${major_minor_patch_version}

    if [[ ! -f $build_tracking_file ]]; then
      export PPA_PAK_PACKAGE_NAME="ruby${major_minor_version}"
      export PPA_PAK_VERSION="${major_minor_patch_version}-${v_debian_version}"
      export PPA_PAK_COPYRIGHT="${v_build_directory}/BSDL"

      "$(dirname "$0")/prepare_ppa_package" "$v_build_directory" "${v_cowbuild_option[@]}" "${v_upload_option[@]}"

      touch "$build_tracking_file"
    else
      echo "Version $major_minor_patch_version has already been packaged; skipping..."
    fi
  done
}

decode_commandline_options "$@"
trap notify_build_dir EXIT
check_data_directory
prepare_temp_dir
download_ruby_downloads_webpage
find_and_set_stable_version_links
# download_and_unpack_tarballs
# prepare_packages
